<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        <bean id="stringToDateConverter" class="org.springframework.context.support.ConversionServiceFactoryBean">
        	<property name="converters">
        		<list>
        			<bean class="ynjh.common.convertor.StringToDateConvertor">
        				<constructor-arg type="java.lang.String" value="yyyy-MM-dd"></constructor-arg>
        			</bean>
        		</list>
        	</property>
        </bean>
        <!-- name属性为访问Controller的路径，不进行拼接 
        <bean name="/index" class="controller.IndexController"></bean>-->
        <!-- 启动了控制器(controller)的注解功能 -->
        <mvc:annotation-driven conversion-service="stringToDateConverter" >
        		<mvc:message-converters>
        			<!-- 解决ajax中文乱码问题 -->
        			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
        				<property name="supportedMediaTypes" >
        					<list>
        						<value>application/json;charset=UTF-8</value>
        					</list>
        				</property>
        			</bean>
        			<!-- 配置日期显示格式，默认yyyy-MM-dd HH:mm:ss,如果更改，需要使用@JSONField注解 -->
        			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        				<property name="supportedMediaTypes">
        					<list>
        						<value>text/html;charset=UTF-8</value>
        						<value>application/json</value>
        					</list>
        				</property>
        				<property name="features">
        					<list>
        						<value>WriteDateUseDateFormat</value>
        					</list>
        				</property>
        			</bean>
        		</mvc:message-converters>
        </mvc:annotation-driven>
        
        <!-- 多视图解析器 -->
        <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        		<!-- true表示支持默认格式参数匹配，参数名叫format,通过请求参数传递输出格式
        		如：/user?format=json -->
        		<property name="favorParameter" value="true"></property>
        		<!-- 也可以使用请求后缀的形式来传递输出格式
        		如：/user.json -->
	        <property name="mediaTypes">
	            <map>
	                <entry key="html" value="text/html;charset=UTF-8" />
	                <entry key="json" value="application/json;charset=UTF-8" />
	                <entry key="xml" value="application/xml;charset=UTF-8" />
	            </map>
	        </property>
	        <property name="viewResolvers">
	            <list>
	            		<!-- 完成Controller返回（return）的逻辑路径名称的拼接
	        				InternalResourceViewResolver:专门用于JSP或HTML路径解析的 -->
	                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		            		<!-- 因为WEB-INF下的文件无法通过浏览器直接访问 -->
		            		<property name="prefix" value="/WEB-INF/pages/"></property>
		            		<!-- 后缀不能是.html,只能是.jsp -->
		            		<property name="suffix" value=".jsp"></property>
	                </bean>
	            </list>
	        </property>
		</bean>
        <context:component-scan base-package="ynjh" use-default-filters="false">
        		<!-- 由于Spring与Spring MVC均使用同一种方法扫描Bean，将Bean实例化到IoC容器中
        		所以，在写扫描时，注意不要重复扫描！可使用过滤的方式，指定扫描的注解来解决重复扫描问题 -->
        		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>
        <!-- 配置引入静态资源的默认方式，可将相关css,js，img等放在根目录下 -->
        <!-- <mvc:default-servlet-handler/> -->
        
        <!-- 如果要把相关静态资源也放到WEB-INF下，则使用mvc:resources来完成
        		/**表示location指定位置按根路径引用，可以引用其下的所有子文件夹 -->
        <mvc:resources location="/WEB-INF/resources/" mapping="/**" />
        <!-- 文件上传 -->
        <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	        <property name="maxUploadSize" value="5000000" />
	        <property name="defaultEncoding" value="UTF-8" />
    		</bean>
        <!-- 配置全局异常处理器 -->
        <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        		<property name="exceptionMappings">
        			<props>
        				<!--	指定RuntimeException由叫“error”的逻辑视图来处理 -->
        				<prop key="java.lang.RuntimeException">error</prop>
        			</props>
        		</property>
        </bean>
		<mvc:interceptors>
			<!-- <mvc:interceptor >
					
					<mvc:mapping path="/**"/>
					<bean class="ynjh.common.interceptor.UserLoginIntersepter" />
				</mvc:interceptor>  -->
			<mvc:interceptor >
				<!-- 拦截路径指定 -->
				<mvc:mapping path="/company/artanddis/article/like"/>
				<bean class="ynjh.common.interceptor.LikeInterceptor" />
			</mvc:interceptor>
			<mvc:interceptor>
				<mvc:mapping path="/company/artanddis/comment/likecomment"/>
				<bean class="ynjh.common.interceptor.CommentLikeInterceptor"/>
			</mvc:interceptor>
		</mvc:interceptors>
</beans>