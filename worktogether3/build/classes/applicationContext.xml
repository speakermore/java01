<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd ">
	
	<!--  数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://127.0.0.1:/worktogether?useUnicode=true&amp;characterEncoding=utf-8"></property>
		<property name="username" value="java01"></property>
		<property name="password" value="123456"></property>
	</bean>
	<!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    		<property name="dataSource" ref="dataSource"></property>
    		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>
    
    <!-- 配置SqlSessionTemplate -->
   <!--  <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    	构造方法注入，name为参数名, ref和value为传值
    	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>    	
    </bean> -->
    
    <!-- Dao -->    
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    		<property name="basePackage" value="ynjh.personal.dao,ynjh.admin.dao,ynjh.company.dao"></property>
    </bean>
    <!-- Service -->
    <!-- 扫描注解定义 -->
    <context:component-scan base-package="cn.worktogether.service" use-default-filters="false">
    		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>
    
    <!-- 文件上传 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="5000000" />
        <property name="defaultEncoding" value="UTF-8" />
    </bean>
    <!-- 声明式事务 -->
     <!-- 事务管理器（雇佣了一个事务能手） -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    		<property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 启动注解事务管理
    transaction-manager：就是引用前面定义的事务管理器的id
    如果事务管理器的名称叫transactionManager可省略不写
    可以service类的前面加上@Transactional()注解 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!-- 事务增强规则（告诉事务能手，你应该如何来开事务） -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
    		<tx:attributes>
    			<!-- name属性是指方法名，可以使用通配符*
    			name="*"是指那些没有被定义过的方法名 -->
    			<tx:method name="find*" read-only="true" />
    			<tx:method name="*" propagation="REQUIRED" />
    		</tx:attributes>
    </tx:advice>
    <!-- 配置切面（告诉事务能手，在哪个位置应用规则） -->
    <aop:config>
    		<aop:advisor pointcut="execution(* ynjh.personal.service.impl.*.*(..)" advice-ref="txAdvice" />
    		<aop:advisor pointcut="execution(* ynjh.admin.service.impl.*.*(..)" advice-ref="txAdvice" />
    		<aop:advisor pointcut="execution(* ynjh.company.service.impl.*.*(..)" advice-ref="txAdvice" />
    </aop:config></beans>